import { db } from "../firebase.js";

export const getUserData = async (user) => {
  console.log("üìå getUserData –≤–∏–∫–ª–∏–∫–∞–Ω–æ! User:", user);

  try {
    if (!user) {
      console.error("‚ùå –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");
      throw new Error("Unauthorized");
    }

    const userDoc = await db.collection("users").doc(user.uid).get();
    if (!userDoc.exists) {
      console.error("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ Firestore");
      throw new Error("User document not found");
    }

    const userData = userDoc.data();
    console.log("‚úÖ –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", userData);

    const bookmarksRefs = userData?.bookmarks ?? [];

    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –≤–ø—Ä–∞–≤–∏ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏
    const bookmarks = await Promise.all(
      bookmarksRefs.map(async (ref) => {
        const exerciseDoc = await db.doc(ref).get();
        if (!exerciseDoc.exists) {
          console.warn(`‚ö†Ô∏è –í–ø—Ä–∞–≤–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: ${ref}`);
          return null;
        }
        return { id: exerciseDoc.id, ...exerciseDoc.data() };
      })
    );

    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ `null` –∑–Ω–∞—á–µ–Ω–Ω—è
    return { bookmarks: bookmarks.filter((b) => b !== null) };
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
    throw new Error("Failed to fetch user");
  }
};